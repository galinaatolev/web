@model BeautyMoldova.Domain.Models.Category

@{
    ViewBag.Title = "Create Category";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex items-center mb-6">
        <a href="@Url.Action("Categories")" class="text-gray-500 hover:text-gray-700 mr-3">
            <i class="fas fa-arrow-left"></i>
        </a>
        <h1 class="text-2xl font-bold text-gray-800">Create New Category</h1>
    </div>
    
    @using (Html.BeginForm("CreateCategory", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", @class = "space-y-6" }))
    {
        @Html.AntiForgeryToken()
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Left column - basic information -->
            <div class="space-y-6">
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Basic Information</h3>
                    
                    <div class="space-y-4">
                        <div>
                            <label for="Name" class="block text-sm font-medium text-gray-700 mb-1">Category Name <span class="text-red-500">*</span></label>
                            @Html.TextBoxFor(m => m.Name, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", placeholder = "Enter category name" })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                        
                        <div>
                            <label for="Slug" class="block text-sm font-medium text-gray-700 mb-1">Slug</label>
                            @Html.TextBoxFor(m => m.Slug, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", placeholder = "Enter slug (or leave blank to generate automatically)" })
                            @Html.ValidationMessageFor(m => m.Slug, "", new { @class = "text-red-500 text-xs mt-1" })
                            <p class="text-xs text-gray-500 mt-1">The "slug" is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.</p>
                        </div>
                        
                        <div>
                            <label for="Description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            @Html.TextAreaFor(m => m.Description, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", rows = "4", placeholder = "Enter category description" })
                            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                        
                        <div>
                            <label for="ParentCategoryId" class="block text-sm font-medium text-gray-700 mb-1">Parent Category</label>
                            <select id="ParentCategoryId" name="ParentCategoryId" class="w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50">
                                <option value="">None (Top Level Category)</option>
                                @foreach (var category in ViewBag.ParentCategories)
                                {
                                    <option value="@category.Id" @(Model != null && Model.ParentCategoryId == category.Id ? "selected" : "")>@category.Name</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(m => m.ParentCategoryId, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                    </div>
                </div>

                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Display Settings</h3>
                    
                    <div class="space-y-4">
                        <div>
                            <label for="DisplayOrder" class="block text-sm font-medium text-gray-700 mb-1">Display Order</label>
                            <input type="number" id="DisplayOrder" name="DisplayOrder" value="@(Model?.DisplayOrder ?? 0)" 
                                   class="w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50" 
                                   placeholder="0" min="0">
                            @Html.ValidationMessageFor(m => m.DisplayOrder, "", new { @class = "text-red-500 text-xs mt-1" })
                            <p class="text-xs text-gray-500 mt-1">Determines the order in which categories are displayed. Categories with lower numbers are displayed first.</p>
                        </div>
                        
                        <div class="flex items-center space-x-6">
                            <div class="flex items-center">
                                @Html.CheckBoxFor(m => m.IsActive, new { @class = "rounded border-gray-300 text-pink-600 focus:ring-pink-500 h-4 w-4" })
                                <label for="IsActive" class="ml-2 block text-sm text-gray-700">Active</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Right column - SEO and media -->
            <div class="space-y-6">
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Image</h3>
                    
                    <div class="space-y-4">
                        <div>
                            <label for="categoryImage" class="block text-sm font-medium text-gray-700 mb-1">Category Image</label>
                            <div class="mt-1 flex items-center">
                                <div class="h-32 w-32 border-2 border-gray-300 border-dashed rounded-md overflow-hidden bg-gray-100 flex items-center justify-center">
                                    <img id="imagePreview" src="#" alt="Preview" class="h-full w-full object-cover hidden">
                                    <span id="uploadIcon" class="text-gray-400">
                                        <i class="fas fa-upload text-2xl"></i>
                                    </span>
                                </div>
                                <input type="file" id="categoryImage" name="categoryImage" accept="image/*" 
                                       class="ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                            </div>
                            <p class="text-xs text-gray-500 mt-1">Recommended size: 800x600 pixels, JPG or PNG format</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">SEO Settings</h3>
                    
                    <div class="space-y-4">
                        <div>
                            <label for="MetaTitle" class="block text-sm font-medium text-gray-700 mb-1">Meta Title</label>
                            @Html.TextBoxFor(m => m.MetaTitle, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", placeholder = "Enter meta title (leave blank to use category name)" })
                            @Html.ValidationMessageFor(m => m.MetaTitle, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                        
                        <div>
                            <label for="MetaDescription" class="block text-sm font-medium text-gray-700 mb-1">Meta Description</label>
                            @Html.TextAreaFor(m => m.MetaDescription, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", rows = "3", placeholder = "Enter meta description" })
                            @Html.ValidationMessageFor(m => m.MetaDescription, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                        
                        <div>
                            <label for="MetaKeywords" class="block text-sm font-medium text-gray-700 mb-1">Meta Keywords</label>
                            @Html.TextBoxFor(m => m.MetaKeywords, new { @class = "w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring focus:ring-pink-200 focus:ring-opacity-50", placeholder = "Enter meta keywords, separated by commas" })
                            @Html.ValidationMessageFor(m => m.MetaKeywords, "", new { @class = "text-red-500 text-xs mt-1" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="flex justify-end space-x-3 pt-4 border-t">
            <a href="@Url.Action("Categories")" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                Cancel
            </a>
            <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-pink-600 hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                Save Category
            </button>
        </div>
    }
</div>

<script>
    $(document).ready(function() {
        // Image preview on upload
        $('#categoryImage').change(function() {
            if (this.files && this.files[0]) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    $('#imagePreview').attr('src', e.target.result).removeClass('hidden');
                    $('#uploadIcon').addClass('hidden');
                }
                reader.readAsDataURL(this.files[0]);
            }
        });
        
        // Generate slug from name if slug is empty
        $('#Name').keyup(function() {
            if ($('#Slug').val() === '') {
                var slug = $(this).val()
                    .toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/[\s_-]+/g, '-')
                    .replace(/^-+|-+$/g, '');
                $('#Slug').val(slug);
            }
        });
    });
</script> 